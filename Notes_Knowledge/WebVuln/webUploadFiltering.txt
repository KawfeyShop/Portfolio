If a website gives you a means of uploading a file, it is extremely easy to get remote access via a reverse shell. 
Because of this, websites have combatted this with filtering. 

Websites use two type of over-arching filtering. One is Client-Side filtering and one is Server-Side filtering
-Client Side filtering is when the filtering script runs before the file is uploaded to the server. This leaves security holes as you can exploit this by spoofing it.
	-Ways to bypass this is to turn javascript off in your browser, intercept and modify the incoming page with burpsuite, intercept and modify the file upload, or send the file using curl. 
	-You can intercept and modify the incoming or page through burpsuite by allowing file certain filetypes on the client side javascript script. 
-Server Side filtering is when the filtering script is ran on the server. This is more difficult to bypass. 
	-A lot of serverside filtering is done throught a blacklist of filetypes. It is common to look for the last period to determine the file type. Thus we are able to use a null byte to rip off the last part of it.
	-Another way to bypass is through trial and error trying different types of php files like php3, php5, phar, etc. 
	-Another way to bypass this is by adding the .php file extension after something like .jpg. So with this it'd be like logan.jpg.php. This is good when they are doing only whitelisting of filetypes. They see the jpg and think, yes this must be right/acceptable. 
	-PHP extensions: https://en.wikipedia.org/wiki/PHP
-Bypassing Server Side Magic Numbers:
	-Magic numbers are the first thing in a file. They are hexadecimals. Magic Numbers are 4 bytes long. 
	-File signature magic numbers https://en.wikipedia.org/wiki/List_of_file_signatures
	-Since the magic number is 4 bytes long append the start of the file with 4 characters, they can be anything so "AAAA"
	-Next open hexeditor and change these 4 bytes to the acceptable file type for instance, .jpg would be: FF D8 FF DB. This will convince a magic number filter that it's a JPG file. 
	-Upload the file and then navigate and open it. Sometimes you may not be able to open the uploads page and instead have to open it through the url such as: http://magic.uploadvulns.thm/graphics/shell.php
-Methodology for exploiting upload vulnerabilites:
	1. use an extension to enumerate the website to see what it's coded in etc. Or use burpsuite and intercept the response to look for server or x-powered-by. 
	2. Look at source code for file upload filters
	3. Figure out where a normal non-malicious file is headed this is commonly done using gobuster.
		- the flag x is good at looking for specific extensions such as php.
	4. Upload malicious file to determine if client side or server side filtering
		-if server side: 
			1. Try a non valid file extension, this checks for blacklisted extensions.
			2. Change the magic number of an acceptable file to a commonly seen malicious file type. This checks for magic number filtering.
			3. Upload innocent file and with burpsuite, intercept and change the MIME to check for MIME filtering.
			4. Try different file lengths to check for a file length filter. 

Windows uses file extension filtering, for example it wouldn't accept anything like a .exe file.
Linux uses Magic Number validation, which looks at the hexdump of the start of the file to see the extension.

However, both of these are semi easy to spoof. 

Therefore, there are more filtering techniques. Some include length filtering, MIME filtering, file name filtering, and file content filtering.

-Length Filtering checks to see if the length of the file is within the parameter as to not starve the server of resources. 
-MIME is very easy to spoof as it just checks the file extension. 
-File name filtering checks to see if there is already a file named that, in this case it gives it a different name so you may have to look around to exec it. 
-File content filtering is the best as it checks the file to see if it's spoofing it, however, this is the most complex to implement. 
